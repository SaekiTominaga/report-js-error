var e,t,o,n=this&&this.__classPrivateFieldSet||function(e,t,o){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,o),o},s=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};export default class{constructor(s,r={}){e.set(this,void 0),t.set(this,void 0),o.set(this,void 0),n(this,e,s),void 0===r.fetchParam&&(r.fetchParam={location:"location",message:"message",filename:"filename",lineno:"lineno",colno:"colno"}),n(this,t,r),n(this,o,this._errorEvent.bind(this))}init(){this._checkUserAgent()&&window.addEventListener("error",s(this,o),{passive:!0})}_checkUserAgent(){const e=navigator.userAgent,o=s(this,t).denyUAs;if(void 0!==o&&o.some((t=>t.test(e))))return console.info("No JavaScript error report will be sent because the user agent match the deny list."),!1;const n=s(this,t).allowUAs;return!(void 0!==n&&!n.some((t=>t.test(e))))||(console.info("No JavaScript error report will be sent because the user agent does not match the allow list."),!1)}async _errorEvent(o){const n=o.message,r=o.filename,i=o.lineno,a=o.colno;if(""===r)return void console.error("`ErrorEvent.filename` is empty.");const c=s(this,t).denyFilenames;if(void 0!==c&&c.some((e=>e.test(r))))return void console.info("No JavaScript error report will be sent because the filename match the deny list.");const l=s(this,t).allowFilenames;if(void 0!==l&&!l.some((e=>e.test(r))))return void console.info("No JavaScript error report will be sent because the filename does not match the allow list.");switch(new URL(r).protocol){case"https:":case"http:":break;default:return void console.error("A JavaScript error has occurred in a non-HTTP protocol (This may be due to a browser extension).")}const h=s(this,t).fetchParam,d=new FormData;d.append(h.location,location.toString()),d.append(h.message,n),d.append(h.filename,r),d.append(h.lineno,String(i)),d.append(h.colno,String(a));const p=await fetch(s(this,e),{method:"POST",headers:s(this,t).fetchHeaders,body:new URLSearchParams([...d])});p.ok||console.error(`"${p.url}" is ${p.status} ${p.statusText}`)}}e=new WeakMap,t=new WeakMap,o=new WeakMap;
//# sourceMappingURL=ReportJSError.min.js.map